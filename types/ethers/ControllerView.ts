/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ControllerViewInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "owner"
      | "supportsInterface"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "controller"
      | "getAccountLiquidity"
      | "getCurrentMyIncentiveToken"
      | "getHypotheticalAccountLiquidity"
      | "getLiquidationIncentiveOf"
      | "incentiveTokenInitialIndex"
      | "initialize"
      | "liquidateCalculateSeizeTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "ProxyImplementationUpdated"
      | "Initialized"
  ): EventFragment;

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountLiquidity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentMyIncentiveToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getHypotheticalAccountLiquidity",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationIncentiveOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "incentiveTokenInitialIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateCalculateSeizeTokens",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentMyIncentiveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHypotheticalAccountLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationIncentiveOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentiveTokenInitialIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateCalculateSeizeTokens",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProxyImplementationUpdatedEvent {
  export type InputTuple = [
    previousImplementation: AddressLike,
    newImplementation: AddressLike
  ];
  export type OutputTuple = [
    previousImplementation: string,
    newImplementation: string
  ];
  export interface OutputObject {
    previousImplementation: string;
    newImplementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ControllerView extends BaseContract {
  connect(runner?: ContractRunner | null): ControllerView;
  waitForDeployment(): Promise<this>;

  interface: ControllerViewInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  owner: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<[id: BytesLike], [boolean], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  controller: TypedContractMethod<[], [string], "view">;

  getAccountLiquidity: TypedContractMethod<
    [account: AddressLike],
    [[bigint, bigint, bigint]],
    "view"
  >;

  getCurrentMyIncentiveToken: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  getHypotheticalAccountLiquidity: TypedContractMethod<
    [
      account: AddressLike,
      cTokenModify: AddressLike,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;

  getLiquidationIncentiveOf: TypedContractMethod<
    [cToken: AddressLike],
    [bigint],
    "view"
  >;

  incentiveTokenInitialIndex: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [controller_: AddressLike],
    [void],
    "nonpayable"
  >;

  liquidateCalculateSeizeTokens: TypedContractMethod<
    [
      cTokenBorrowed: AddressLike,
      cTokenCollateral: AddressLike,
      actualRepayAmount: BigNumberish
    ],
    [[bigint, bigint]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[id: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "controller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAccountLiquidity"
  ): TypedContractMethod<
    [account: AddressLike],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentMyIncentiveToken"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHypotheticalAccountLiquidity"
  ): TypedContractMethod<
    [
      account: AddressLike,
      cTokenModify: AddressLike,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLiquidationIncentiveOf"
  ): TypedContractMethod<[cToken: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "incentiveTokenInitialIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[controller_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "liquidateCalculateSeizeTokens"
  ): TypedContractMethod<
    [
      cTokenBorrowed: AddressLike,
      cTokenCollateral: AddressLike,
      actualRepayAmount: BigNumberish
    ],
    [[bigint, bigint]],
    "view"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProxyImplementationUpdated"
  ): TypedContractEvent<
    ProxyImplementationUpdatedEvent.InputTuple,
    ProxyImplementationUpdatedEvent.OutputTuple,
    ProxyImplementationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProxyImplementationUpdated(address,address)": TypedContractEvent<
      ProxyImplementationUpdatedEvent.InputTuple,
      ProxyImplementationUpdatedEvent.OutputTuple,
      ProxyImplementationUpdatedEvent.OutputObject
    >;
    ProxyImplementationUpdated: TypedContractEvent<
      ProxyImplementationUpdatedEvent.InputTuple,
      ProxyImplementationUpdatedEvent.OutputTuple,
      ProxyImplementationUpdatedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
  };
}
