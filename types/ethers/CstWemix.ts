/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CstWemixInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "owner"
      | "supportsInterface"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "NO_ERROR"
      | "accountBalances"
      | "accrualBlockNumber"
      | "accrueInterest"
      | "addReserves"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "balanceOfUnderlying"
      | "borrow"
      | "borrowBalanceCurrent"
      | "borrowBalanceStored"
      | "borrowHelper"
      | "borrowIndex"
      | "borrowPrincipal"
      | "borrowRatePerBlock"
      | "controller"
      | "controllerView"
      | "decimals"
      | "doubleScale"
      | "exchangeRateCurrent"
      | "exchangeRateStored"
      | "expScale"
      | "getAccountSnapshot"
      | "getBlockDelta"
      | "getCash"
      | "getIsServiceAdmin"
      | "getMasterAdmin"
      | "getSimpleInterestFactorCurrent"
      | "initialExchangeRateMantissa"
      | "initialize"
      | "interestRateModel"
      | "isCToken"
      | "liquidateBorrow"
      | "mint"
      | "mintHelper"
      | "name"
      | "protocolSeizeShareMantissa"
      | "redeemUnderlying"
      | "redeemUnderlyingMax"
      | "reduceReserves"
      | "repayBorrow"
      | "repayBorrowBehalf"
      | "repayBorrowHelper"
      | "reserveFactorMantissa"
      | "seize"
      | "setController"
      | "setControllerView"
      | "setInterestRateModel"
      | "setProtocolSeizeShareMantissa"
      | "setReserveFactor"
      | "setTransactionHelper"
      | "supplyPrincipal"
      | "supplyRatePerBlock"
      | "symbol"
      | "totalBorrows"
      | "totalReserves"
      | "totalSupply"
      | "transactionHelper"
      | "transfer"
      | "transferAllowances"
      | "transferFrom"
      | "underlying"
      | "underlyingSymbol"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "ProxyImplementationUpdated"
      | "AccrueInterest"
      | "Approval"
      | "Borrow"
      | "Failure"
      | "Initialized"
      | "LiquidateBorrow"
      | "Mint"
      | "NewController"
      | "NewControllerView"
      | "NewInterestRateModel"
      | "NewMasterAdmin"
      | "NewProtocolSeizeShare"
      | "NewReserveFactor"
      | "NewTransactionHelper"
      | "Redeem"
      | "RepayBorrow"
      | "ReservesAdded"
      | "ReservesReduced"
      | "ServiceAdminSetted"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "NO_ERROR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accountBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "accrualBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accrueInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addReserves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfUnderlying",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowBalanceCurrent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowBalanceStored",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowHelper",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowPrincipal",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowRatePerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controllerView",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "doubleScale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRateCurrent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRateStored",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "expScale", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAccountSnapshot",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockDelta",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getCash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getIsServiceAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMasterAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSimpleInterestFactorCurrent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialExchangeRateMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      string,
      string,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRateModel",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isCToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidateBorrow",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "mintHelper",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolSeizeShareMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUnderlying",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUnderlyingMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reduceReserves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrowBehalf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrowHelper",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveFactorMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seize",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setControllerView",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestRateModel",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolSeizeShareMantissa",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransactionHelper",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyPrincipal",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyRatePerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBorrows",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactionHelper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAllowances",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingSymbol",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NO_ERROR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accountBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accrualBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accrueInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowBalanceCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowBalanceStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowPrincipal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "controllerView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "doubleScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRateCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRateStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expScale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIsServiceAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMasterAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSimpleInterestFactorCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialExchangeRateMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isCToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintHelper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolSeizeShareMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemUnderlyingMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reduceReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrowBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrowHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveFactorMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setControllerView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolSeizeShareMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransactionHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyPrincipal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAllowances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingSymbol",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProxyImplementationUpdatedEvent {
  export type InputTuple = [
    previousImplementation: AddressLike,
    newImplementation: AddressLike
  ];
  export type OutputTuple = [
    previousImplementation: string,
    newImplementation: string
  ];
  export interface OutputObject {
    previousImplementation: string;
    newImplementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccrueInterestEvent {
  export type InputTuple = [
    accrualBlockNumber: BigNumberish,
    interestAccumulated: BigNumberish,
    borrowIndex: BigNumberish,
    totalBorrows: BigNumberish,
    totalReserves: BigNumberish
  ];
  export type OutputTuple = [
    accrualBlockNumber: bigint,
    interestAccumulated: bigint,
    borrowIndex: bigint,
    totalBorrows: bigint,
    totalReserves: bigint
  ];
  export interface OutputObject {
    accrualBlockNumber: bigint;
    interestAccumulated: bigint;
    borrowIndex: bigint;
    totalBorrows: bigint;
    totalReserves: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowEvent {
  export type InputTuple = [
    borrower: AddressLike,
    borrowAmount: BigNumberish,
    underlying: AddressLike
  ];
  export type OutputTuple = [
    borrower: string,
    borrowAmount: bigint,
    underlying: string
  ];
  export interface OutputObject {
    borrower: string;
    borrowAmount: bigint;
    underlying: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FailureEvent {
  export type InputTuple = [
    error: BigNumberish,
    info: BigNumberish,
    detail: BigNumberish
  ];
  export type OutputTuple = [error: bigint, info: bigint, detail: bigint];
  export interface OutputObject {
    error: bigint;
    info: bigint;
    detail: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidateBorrowEvent {
  export type InputTuple = [
    liquidator: AddressLike,
    borrower: AddressLike,
    repayAmount: BigNumberish,
    cTokenCollateral: AddressLike,
    seizeTokens: BigNumberish,
    collateralUnderlying: AddressLike
  ];
  export type OutputTuple = [
    liquidator: string,
    borrower: string,
    repayAmount: bigint,
    cTokenCollateral: string,
    seizeTokens: bigint,
    collateralUnderlying: string
  ];
  export interface OutputObject {
    liquidator: string;
    borrower: string;
    repayAmount: bigint;
    cTokenCollateral: string;
    seizeTokens: bigint;
    collateralUnderlying: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintEvent {
  export type InputTuple = [
    minter: AddressLike,
    mintAmount: BigNumberish,
    mintTokens: BigNumberish,
    underlying: AddressLike
  ];
  export type OutputTuple = [
    minter: string,
    mintAmount: bigint,
    mintTokens: bigint,
    underlying: string
  ];
  export interface OutputObject {
    minter: string;
    mintAmount: bigint;
    mintTokens: bigint;
    underlying: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewControllerEvent {
  export type InputTuple = [newController: AddressLike];
  export type OutputTuple = [newController: string];
  export interface OutputObject {
    newController: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewControllerViewEvent {
  export type InputTuple = [newControllerView: AddressLike];
  export type OutputTuple = [newControllerView: string];
  export interface OutputObject {
    newControllerView: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewInterestRateModelEvent {
  export type InputTuple = [newInterestRateModel: AddressLike];
  export type OutputTuple = [newInterestRateModel: string];
  export interface OutputObject {
    newInterestRateModel: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewMasterAdminEvent {
  export type InputTuple = [newMasterAdmin: AddressLike];
  export type OutputTuple = [newMasterAdmin: string];
  export interface OutputObject {
    newMasterAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewProtocolSeizeShareEvent {
  export type InputTuple = [
    oldProtocolSeizeShareMantissa: BigNumberish,
    newProtocolSeizeShareMantissa: BigNumberish
  ];
  export type OutputTuple = [
    oldProtocolSeizeShareMantissa: bigint,
    newProtocolSeizeShareMantissa: bigint
  ];
  export interface OutputObject {
    oldProtocolSeizeShareMantissa: bigint;
    newProtocolSeizeShareMantissa: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewReserveFactorEvent {
  export type InputTuple = [
    oldReserveFactorMantissa: BigNumberish,
    newReserveFactorMantissa: BigNumberish
  ];
  export type OutputTuple = [
    oldReserveFactorMantissa: bigint,
    newReserveFactorMantissa: bigint
  ];
  export interface OutputObject {
    oldReserveFactorMantissa: bigint;
    newReserveFactorMantissa: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewTransactionHelperEvent {
  export type InputTuple = [newTransactionHelper: AddressLike];
  export type OutputTuple = [newTransactionHelper: string];
  export interface OutputObject {
    newTransactionHelper: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemEvent {
  export type InputTuple = [
    redeemer: AddressLike,
    redeemAmount: BigNumberish,
    underlying: AddressLike
  ];
  export type OutputTuple = [
    redeemer: string,
    redeemAmount: bigint,
    underlying: string
  ];
  export interface OutputObject {
    redeemer: string;
    redeemAmount: bigint;
    underlying: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepayBorrowEvent {
  export type InputTuple = [
    payer: AddressLike,
    borrower: AddressLike,
    repayAmount: BigNumberish,
    accountBorrows: BigNumberish,
    totalBorrows: BigNumberish,
    underlying: AddressLike
  ];
  export type OutputTuple = [
    payer: string,
    borrower: string,
    repayAmount: bigint,
    accountBorrows: bigint,
    totalBorrows: bigint,
    underlying: string
  ];
  export interface OutputObject {
    payer: string;
    borrower: string;
    repayAmount: bigint;
    accountBorrows: bigint;
    totalBorrows: bigint;
    underlying: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReservesAddedEvent {
  export type InputTuple = [
    benefactor: AddressLike,
    addAmount: BigNumberish,
    newTotalReserves: BigNumberish
  ];
  export type OutputTuple = [
    benefactor: string,
    addAmount: bigint,
    newTotalReserves: bigint
  ];
  export interface OutputObject {
    benefactor: string;
    addAmount: bigint;
    newTotalReserves: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReservesReducedEvent {
  export type InputTuple = [
    admin: AddressLike,
    reduceAmount: BigNumberish,
    newTotalReserves: BigNumberish
  ];
  export type OutputTuple = [
    admin: string,
    reduceAmount: bigint,
    newTotalReserves: bigint
  ];
  export interface OutputObject {
    admin: string;
    reduceAmount: bigint;
    newTotalReserves: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ServiceAdminSettedEvent {
  export type InputTuple = [serviceAdminAddr: AddressLike, state: boolean];
  export type OutputTuple = [serviceAdminAddr: string, state: boolean];
  export interface OutputObject {
    serviceAdminAddr: string;
    state: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    sender: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [sender: string, recipient: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CstWemix extends BaseContract {
  connect(runner?: ContractRunner | null): CstWemix;
  waitForDeployment(): Promise<this>;

  interface: CstWemixInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  owner: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<[id: BytesLike], [boolean], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  NO_ERROR: TypedContractMethod<[], [bigint], "view">;

  accountBalances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  accrualBlockNumber: TypedContractMethod<[], [bigint], "view">;

  accrueInterest: TypedContractMethod<[], [bigint], "nonpayable">;

  addReserves: TypedContractMethod<
    [addAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  balanceOfUnderlying: TypedContractMethod<
    [owner: AddressLike],
    [bigint],
    "view"
  >;

  borrow: TypedContractMethod<
    [borrowAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  borrowBalanceCurrent: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  borrowBalanceStored: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  borrowHelper: TypedContractMethod<
    [caller: AddressLike, borrowAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  borrowIndex: TypedContractMethod<[], [bigint], "view">;

  borrowPrincipal: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  borrowRatePerBlock: TypedContractMethod<[], [bigint], "view">;

  controller: TypedContractMethod<[], [string], "view">;

  controllerView: TypedContractMethod<[], [string], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  doubleScale: TypedContractMethod<[], [bigint], "view">;

  exchangeRateCurrent: TypedContractMethod<[], [bigint], "view">;

  exchangeRateStored: TypedContractMethod<[], [bigint], "view">;

  expScale: TypedContractMethod<[], [bigint], "view">;

  getAccountSnapshot: TypedContractMethod<
    [account: AddressLike],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;

  getBlockDelta: TypedContractMethod<[], [bigint], "view">;

  getCash: TypedContractMethod<[], [bigint], "view">;

  getIsServiceAdmin: TypedContractMethod<
    [serviceAdmin: AddressLike],
    [boolean],
    "view"
  >;

  getMasterAdmin: TypedContractMethod<[], [string], "view">;

  getSimpleInterestFactorCurrent: TypedContractMethod<[], [bigint], "view">;

  initialExchangeRateMantissa: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      controller_: AddressLike,
      interestRateModel_: AddressLike,
      controllerView_: AddressLike,
      transactionHelper_: AddressLike,
      initialExchangeRateMantissa_: BigNumberish,
      underlying_: AddressLike,
      name_: string,
      symbol_: string,
      underlyingSymbol_: BytesLike,
      decimals_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  interestRateModel: TypedContractMethod<[], [string], "view">;

  isCToken: TypedContractMethod<[], [boolean], "view">;

  liquidateBorrow: TypedContractMethod<
    [
      borrower: AddressLike,
      repayAmount: BigNumberish,
      cTokenCollateral: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  mint: TypedContractMethod<[mintAmount: BigNumberish], [bigint], "nonpayable">;

  mintHelper: TypedContractMethod<
    [caller: AddressLike, mintAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  protocolSeizeShareMantissa: TypedContractMethod<[], [bigint], "view">;

  redeemUnderlying: TypedContractMethod<
    [redeemUnderlyingAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  redeemUnderlyingMax: TypedContractMethod<[], [void], "nonpayable">;

  reduceReserves: TypedContractMethod<
    [reduceAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  repayBorrow: TypedContractMethod<
    [repayAmount: BigNumberish],
    [bigint],
    "payable"
  >;

  repayBorrowBehalf: TypedContractMethod<
    [borrower: AddressLike, repayAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  repayBorrowHelper: TypedContractMethod<
    [caller: AddressLike, repayAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  reserveFactorMantissa: TypedContractMethod<[], [bigint], "view">;

  seize: TypedContractMethod<
    [liquidator: AddressLike, borrower: AddressLike, seizeTokens: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  setController: TypedContractMethod<
    [newController: AddressLike],
    [void],
    "nonpayable"
  >;

  setControllerView: TypedContractMethod<
    [controllerView_: AddressLike],
    [void],
    "nonpayable"
  >;

  setInterestRateModel: TypedContractMethod<
    [newInterestRateModel: AddressLike],
    [bigint],
    "nonpayable"
  >;

  setProtocolSeizeShareMantissa: TypedContractMethod<
    [newProtocolSeizeShareMantissa: BigNumberish],
    [void],
    "nonpayable"
  >;

  setReserveFactor: TypedContractMethod<
    [newReserveFactorMantissa: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  setTransactionHelper: TypedContractMethod<
    [transactionHelper_: AddressLike],
    [void],
    "nonpayable"
  >;

  supplyPrincipal: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  supplyRatePerBlock: TypedContractMethod<[], [bigint], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  totalBorrows: TypedContractMethod<[], [bigint], "view">;

  totalReserves: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transactionHelper: TypedContractMethod<[], [string], "view">;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferAllowances: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  underlying: TypedContractMethod<[], [string], "view">;

  underlyingSymbol: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[id: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "NO_ERROR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "accountBalances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "accrualBlockNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "accrueInterest"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "addReserves"
  ): TypedContractMethod<[addAmount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfUnderlying"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<[borrowAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "borrowBalanceCurrent"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrowBalanceStored"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrowHelper"
  ): TypedContractMethod<
    [caller: AddressLike, borrowAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrowIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrowPrincipal"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrowRatePerBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "controller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "controllerView"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "doubleScale"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "exchangeRateCurrent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "exchangeRateStored"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "expScale"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAccountSnapshot"
  ): TypedContractMethod<
    [account: AddressLike],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBlockDelta"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCash"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getIsServiceAdmin"
  ): TypedContractMethod<[serviceAdmin: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getMasterAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getSimpleInterestFactorCurrent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialExchangeRateMantissa"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      controller_: AddressLike,
      interestRateModel_: AddressLike,
      controllerView_: AddressLike,
      transactionHelper_: AddressLike,
      initialExchangeRateMantissa_: BigNumberish,
      underlying_: AddressLike,
      name_: string,
      symbol_: string,
      underlyingSymbol_: BytesLike,
      decimals_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "interestRateModel"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isCToken"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "liquidateBorrow"
  ): TypedContractMethod<
    [
      borrower: AddressLike,
      repayAmount: BigNumberish,
      cTokenCollateral: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<[mintAmount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "mintHelper"
  ): TypedContractMethod<
    [caller: AddressLike, mintAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolSeizeShareMantissa"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "redeemUnderlying"
  ): TypedContractMethod<
    [redeemUnderlyingAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemUnderlyingMax"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reduceReserves"
  ): TypedContractMethod<[reduceAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repayBorrow"
  ): TypedContractMethod<[repayAmount: BigNumberish], [bigint], "payable">;
  getFunction(
    nameOrSignature: "repayBorrowBehalf"
  ): TypedContractMethod<
    [borrower: AddressLike, repayAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repayBorrowHelper"
  ): TypedContractMethod<
    [caller: AddressLike, repayAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reserveFactorMantissa"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "seize"
  ): TypedContractMethod<
    [liquidator: AddressLike, borrower: AddressLike, seizeTokens: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setController"
  ): TypedContractMethod<[newController: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setControllerView"
  ): TypedContractMethod<[controllerView_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setInterestRateModel"
  ): TypedContractMethod<
    [newInterestRateModel: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProtocolSeizeShareMantissa"
  ): TypedContractMethod<
    [newProtocolSeizeShareMantissa: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReserveFactor"
  ): TypedContractMethod<
    [newReserveFactorMantissa: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTransactionHelper"
  ): TypedContractMethod<
    [transactionHelper_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supplyPrincipal"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "supplyRatePerBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalBorrows"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalReserves"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transactionHelper"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferAllowances"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "underlying"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "underlyingSymbol"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProxyImplementationUpdated"
  ): TypedContractEvent<
    ProxyImplementationUpdatedEvent.InputTuple,
    ProxyImplementationUpdatedEvent.OutputTuple,
    ProxyImplementationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "AccrueInterest"
  ): TypedContractEvent<
    AccrueInterestEvent.InputTuple,
    AccrueInterestEvent.OutputTuple,
    AccrueInterestEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Borrow"
  ): TypedContractEvent<
    BorrowEvent.InputTuple,
    BorrowEvent.OutputTuple,
    BorrowEvent.OutputObject
  >;
  getEvent(
    key: "Failure"
  ): TypedContractEvent<
    FailureEvent.InputTuple,
    FailureEvent.OutputTuple,
    FailureEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidateBorrow"
  ): TypedContractEvent<
    LiquidateBorrowEvent.InputTuple,
    LiquidateBorrowEvent.OutputTuple,
    LiquidateBorrowEvent.OutputObject
  >;
  getEvent(
    key: "Mint"
  ): TypedContractEvent<
    MintEvent.InputTuple,
    MintEvent.OutputTuple,
    MintEvent.OutputObject
  >;
  getEvent(
    key: "NewController"
  ): TypedContractEvent<
    NewControllerEvent.InputTuple,
    NewControllerEvent.OutputTuple,
    NewControllerEvent.OutputObject
  >;
  getEvent(
    key: "NewControllerView"
  ): TypedContractEvent<
    NewControllerViewEvent.InputTuple,
    NewControllerViewEvent.OutputTuple,
    NewControllerViewEvent.OutputObject
  >;
  getEvent(
    key: "NewInterestRateModel"
  ): TypedContractEvent<
    NewInterestRateModelEvent.InputTuple,
    NewInterestRateModelEvent.OutputTuple,
    NewInterestRateModelEvent.OutputObject
  >;
  getEvent(
    key: "NewMasterAdmin"
  ): TypedContractEvent<
    NewMasterAdminEvent.InputTuple,
    NewMasterAdminEvent.OutputTuple,
    NewMasterAdminEvent.OutputObject
  >;
  getEvent(
    key: "NewProtocolSeizeShare"
  ): TypedContractEvent<
    NewProtocolSeizeShareEvent.InputTuple,
    NewProtocolSeizeShareEvent.OutputTuple,
    NewProtocolSeizeShareEvent.OutputObject
  >;
  getEvent(
    key: "NewReserveFactor"
  ): TypedContractEvent<
    NewReserveFactorEvent.InputTuple,
    NewReserveFactorEvent.OutputTuple,
    NewReserveFactorEvent.OutputObject
  >;
  getEvent(
    key: "NewTransactionHelper"
  ): TypedContractEvent<
    NewTransactionHelperEvent.InputTuple,
    NewTransactionHelperEvent.OutputTuple,
    NewTransactionHelperEvent.OutputObject
  >;
  getEvent(
    key: "Redeem"
  ): TypedContractEvent<
    RedeemEvent.InputTuple,
    RedeemEvent.OutputTuple,
    RedeemEvent.OutputObject
  >;
  getEvent(
    key: "RepayBorrow"
  ): TypedContractEvent<
    RepayBorrowEvent.InputTuple,
    RepayBorrowEvent.OutputTuple,
    RepayBorrowEvent.OutputObject
  >;
  getEvent(
    key: "ReservesAdded"
  ): TypedContractEvent<
    ReservesAddedEvent.InputTuple,
    ReservesAddedEvent.OutputTuple,
    ReservesAddedEvent.OutputObject
  >;
  getEvent(
    key: "ReservesReduced"
  ): TypedContractEvent<
    ReservesReducedEvent.InputTuple,
    ReservesReducedEvent.OutputTuple,
    ReservesReducedEvent.OutputObject
  >;
  getEvent(
    key: "ServiceAdminSetted"
  ): TypedContractEvent<
    ServiceAdminSettedEvent.InputTuple,
    ServiceAdminSettedEvent.OutputTuple,
    ServiceAdminSettedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProxyImplementationUpdated(address,address)": TypedContractEvent<
      ProxyImplementationUpdatedEvent.InputTuple,
      ProxyImplementationUpdatedEvent.OutputTuple,
      ProxyImplementationUpdatedEvent.OutputObject
    >;
    ProxyImplementationUpdated: TypedContractEvent<
      ProxyImplementationUpdatedEvent.InputTuple,
      ProxyImplementationUpdatedEvent.OutputTuple,
      ProxyImplementationUpdatedEvent.OutputObject
    >;

    "AccrueInterest(uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      AccrueInterestEvent.InputTuple,
      AccrueInterestEvent.OutputTuple,
      AccrueInterestEvent.OutputObject
    >;
    AccrueInterest: TypedContractEvent<
      AccrueInterestEvent.InputTuple,
      AccrueInterestEvent.OutputTuple,
      AccrueInterestEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Borrow(address,uint256,address)": TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;
    Borrow: TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;

    "Failure(uint256,uint256,uint256)": TypedContractEvent<
      FailureEvent.InputTuple,
      FailureEvent.OutputTuple,
      FailureEvent.OutputObject
    >;
    Failure: TypedContractEvent<
      FailureEvent.InputTuple,
      FailureEvent.OutputTuple,
      FailureEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LiquidateBorrow(address,address,uint256,address,uint256,address)": TypedContractEvent<
      LiquidateBorrowEvent.InputTuple,
      LiquidateBorrowEvent.OutputTuple,
      LiquidateBorrowEvent.OutputObject
    >;
    LiquidateBorrow: TypedContractEvent<
      LiquidateBorrowEvent.InputTuple,
      LiquidateBorrowEvent.OutputTuple,
      LiquidateBorrowEvent.OutputObject
    >;

    "Mint(address,uint256,uint256,address)": TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;
    Mint: TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;

    "NewController(address)": TypedContractEvent<
      NewControllerEvent.InputTuple,
      NewControllerEvent.OutputTuple,
      NewControllerEvent.OutputObject
    >;
    NewController: TypedContractEvent<
      NewControllerEvent.InputTuple,
      NewControllerEvent.OutputTuple,
      NewControllerEvent.OutputObject
    >;

    "NewControllerView(address)": TypedContractEvent<
      NewControllerViewEvent.InputTuple,
      NewControllerViewEvent.OutputTuple,
      NewControllerViewEvent.OutputObject
    >;
    NewControllerView: TypedContractEvent<
      NewControllerViewEvent.InputTuple,
      NewControllerViewEvent.OutputTuple,
      NewControllerViewEvent.OutputObject
    >;

    "NewInterestRateModel(address)": TypedContractEvent<
      NewInterestRateModelEvent.InputTuple,
      NewInterestRateModelEvent.OutputTuple,
      NewInterestRateModelEvent.OutputObject
    >;
    NewInterestRateModel: TypedContractEvent<
      NewInterestRateModelEvent.InputTuple,
      NewInterestRateModelEvent.OutputTuple,
      NewInterestRateModelEvent.OutputObject
    >;

    "NewMasterAdmin(address)": TypedContractEvent<
      NewMasterAdminEvent.InputTuple,
      NewMasterAdminEvent.OutputTuple,
      NewMasterAdminEvent.OutputObject
    >;
    NewMasterAdmin: TypedContractEvent<
      NewMasterAdminEvent.InputTuple,
      NewMasterAdminEvent.OutputTuple,
      NewMasterAdminEvent.OutputObject
    >;

    "NewProtocolSeizeShare(uint256,uint256)": TypedContractEvent<
      NewProtocolSeizeShareEvent.InputTuple,
      NewProtocolSeizeShareEvent.OutputTuple,
      NewProtocolSeizeShareEvent.OutputObject
    >;
    NewProtocolSeizeShare: TypedContractEvent<
      NewProtocolSeizeShareEvent.InputTuple,
      NewProtocolSeizeShareEvent.OutputTuple,
      NewProtocolSeizeShareEvent.OutputObject
    >;

    "NewReserveFactor(uint256,uint256)": TypedContractEvent<
      NewReserveFactorEvent.InputTuple,
      NewReserveFactorEvent.OutputTuple,
      NewReserveFactorEvent.OutputObject
    >;
    NewReserveFactor: TypedContractEvent<
      NewReserveFactorEvent.InputTuple,
      NewReserveFactorEvent.OutputTuple,
      NewReserveFactorEvent.OutputObject
    >;

    "NewTransactionHelper(address)": TypedContractEvent<
      NewTransactionHelperEvent.InputTuple,
      NewTransactionHelperEvent.OutputTuple,
      NewTransactionHelperEvent.OutputObject
    >;
    NewTransactionHelper: TypedContractEvent<
      NewTransactionHelperEvent.InputTuple,
      NewTransactionHelperEvent.OutputTuple,
      NewTransactionHelperEvent.OutputObject
    >;

    "Redeem(address,uint256,address)": TypedContractEvent<
      RedeemEvent.InputTuple,
      RedeemEvent.OutputTuple,
      RedeemEvent.OutputObject
    >;
    Redeem: TypedContractEvent<
      RedeemEvent.InputTuple,
      RedeemEvent.OutputTuple,
      RedeemEvent.OutputObject
    >;

    "RepayBorrow(address,address,uint256,uint256,uint256,address)": TypedContractEvent<
      RepayBorrowEvent.InputTuple,
      RepayBorrowEvent.OutputTuple,
      RepayBorrowEvent.OutputObject
    >;
    RepayBorrow: TypedContractEvent<
      RepayBorrowEvent.InputTuple,
      RepayBorrowEvent.OutputTuple,
      RepayBorrowEvent.OutputObject
    >;

    "ReservesAdded(address,uint256,uint256)": TypedContractEvent<
      ReservesAddedEvent.InputTuple,
      ReservesAddedEvent.OutputTuple,
      ReservesAddedEvent.OutputObject
    >;
    ReservesAdded: TypedContractEvent<
      ReservesAddedEvent.InputTuple,
      ReservesAddedEvent.OutputTuple,
      ReservesAddedEvent.OutputObject
    >;

    "ReservesReduced(address,uint256,uint256)": TypedContractEvent<
      ReservesReducedEvent.InputTuple,
      ReservesReducedEvent.OutputTuple,
      ReservesReducedEvent.OutputObject
    >;
    ReservesReduced: TypedContractEvent<
      ReservesReducedEvent.InputTuple,
      ReservesReducedEvent.OutputTuple,
      ReservesReducedEvent.OutputObject
    >;

    "ServiceAdminSetted(address,bool)": TypedContractEvent<
      ServiceAdminSettedEvent.InputTuple,
      ServiceAdminSettedEvent.OutputTuple,
      ServiceAdminSettedEvent.OutputObject
    >;
    ServiceAdminSetted: TypedContractEvent<
      ServiceAdminSettedEvent.InputTuple,
      ServiceAdminSettedEvent.OutputTuple,
      ServiceAdminSettedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
