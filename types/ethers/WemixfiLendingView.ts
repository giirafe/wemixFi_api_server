/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace WemixfiLendingViewInterface {
  export type CTokenInfoStruct = {
    underlyingAssetAddress: AddressLike;
    exchangeRateCurrent: BigNumberish;
    underlyingDecimals: BigNumberish;
    poolBalance: BigNumberish;
    underlyingSymbol: BytesLike;
    symbol: string;
    decimals: BigNumberish;
    contractAddress: AddressLike;
    supplyRatePerBlock: BigNumberish;
    borrowRatePerBlock: BigNumberish;
    totalSupply: BigNumberish;
    totalBorrows: BigNumberish;
    collateralFactor: BigNumberish;
    oraclePrice: BigNumberish;
    incentiveTokenSpeed: BigNumberish;
    totalReserves: BigNumberish;
    cash: BigNumberish;
    incentiveTokenSupplyBlock: BigNumberish;
    incentiveTokenBorrowBlock: BigNumberish;
    reserveFactorMantissa: BigNumberish;
    multiplierPerBlock: BigNumberish;
    kink: BigNumberish;
    baseRatePerBlock: BigNumberish;
    jumpMultiplierPerBlock: BigNumberish;
    isMintPaused: boolean;
    isBorrowPaused: boolean;
    isSeizePaused: boolean;
    isTransferPaused: boolean;
    borrowCap: BigNumberish;
    isOraclePaused: boolean;
  };

  export type CTokenInfoStructOutput = [
    underlyingAssetAddress: string,
    exchangeRateCurrent: bigint,
    underlyingDecimals: bigint,
    poolBalance: bigint,
    underlyingSymbol: string,
    symbol: string,
    decimals: bigint,
    contractAddress: string,
    supplyRatePerBlock: bigint,
    borrowRatePerBlock: bigint,
    totalSupply: bigint,
    totalBorrows: bigint,
    collateralFactor: bigint,
    oraclePrice: bigint,
    incentiveTokenSpeed: bigint,
    totalReserves: bigint,
    cash: bigint,
    incentiveTokenSupplyBlock: bigint,
    incentiveTokenBorrowBlock: bigint,
    reserveFactorMantissa: bigint,
    multiplierPerBlock: bigint,
    kink: bigint,
    baseRatePerBlock: bigint,
    jumpMultiplierPerBlock: bigint,
    isMintPaused: boolean,
    isBorrowPaused: boolean,
    isSeizePaused: boolean,
    isTransferPaused: boolean,
    borrowCap: bigint,
    isOraclePaused: boolean
  ] & {
    underlyingAssetAddress: string;
    exchangeRateCurrent: bigint;
    underlyingDecimals: bigint;
    poolBalance: bigint;
    underlyingSymbol: string;
    symbol: string;
    decimals: bigint;
    contractAddress: string;
    supplyRatePerBlock: bigint;
    borrowRatePerBlock: bigint;
    totalSupply: bigint;
    totalBorrows: bigint;
    collateralFactor: bigint;
    oraclePrice: bigint;
    incentiveTokenSpeed: bigint;
    totalReserves: bigint;
    cash: bigint;
    incentiveTokenSupplyBlock: bigint;
    incentiveTokenBorrowBlock: bigint;
    reserveFactorMantissa: bigint;
    multiplierPerBlock: bigint;
    kink: bigint;
    baseRatePerBlock: bigint;
    jumpMultiplierPerBlock: bigint;
    isMintPaused: boolean;
    isBorrowPaused: boolean;
    isSeizePaused: boolean;
    isTransferPaused: boolean;
    borrowCap: bigint;
    isOraclePaused: boolean;
  };

  export type AccountInfoStruct = {
    mySuppliedBalance: BigNumberish;
    myBorrowedBalance: BigNumberish;
    mySupplyPrincipalBalance: BigNumberish;
    myBorrowPrincipalBalance: BigNumberish;
    myRealTokenBalance: BigNumberish;
    incentiveTokenSupplierIndex: BigNumberish;
    incentiveTokenBorrowerIndex: BigNumberish;
  };

  export type AccountInfoStructOutput = [
    mySuppliedBalance: bigint,
    myBorrowedBalance: bigint,
    mySupplyPrincipalBalance: bigint,
    myBorrowPrincipalBalance: bigint,
    myRealTokenBalance: bigint,
    incentiveTokenSupplierIndex: bigint,
    incentiveTokenBorrowerIndex: bigint
  ] & {
    mySuppliedBalance: bigint;
    myBorrowedBalance: bigint;
    mySupplyPrincipalBalance: bigint;
    myBorrowPrincipalBalance: bigint;
    myRealTokenBalance: bigint;
    incentiveTokenSupplierIndex: bigint;
    incentiveTokenBorrowerIndex: bigint;
  };

  export type CTokenMetaDataStruct = {
    cTokenInfo: WemixfiLendingViewInterface.CTokenInfoStruct;
    accountInfo: WemixfiLendingViewInterface.AccountInfoStruct;
  };

  export type CTokenMetaDataStructOutput = [
    cTokenInfo: WemixfiLendingViewInterface.CTokenInfoStructOutput,
    accountInfo: WemixfiLendingViewInterface.AccountInfoStructOutput
  ] & {
    cTokenInfo: WemixfiLendingViewInterface.CTokenInfoStructOutput;
    accountInfo: WemixfiLendingViewInterface.AccountInfoStructOutput;
  };

  export type TokenInfoStruct = {
    underlyingTokenAddr: AddressLike;
    cTokenAddr: AddressLike;
    isCollateralAsset: boolean;
    isBorrowAsset: boolean;
    price: BigNumberish;
    repayAmountMax: BigNumberish;
    collateralUnderlyingTokenAmount: BigNumberish;
  };

  export type TokenInfoStructOutput = [
    underlyingTokenAddr: string,
    cTokenAddr: string,
    isCollateralAsset: boolean,
    isBorrowAsset: boolean,
    price: bigint,
    repayAmountMax: bigint,
    collateralUnderlyingTokenAmount: bigint
  ] & {
    underlyingTokenAddr: string;
    cTokenAddr: string;
    isCollateralAsset: boolean;
    isBorrowAsset: boolean;
    price: bigint;
    repayAmountMax: bigint;
    collateralUnderlyingTokenAmount: bigint;
  };

  export type LiquidationInfoStruct = {
    isLiquidateTarget: boolean;
    tokenInfo: WemixfiLendingViewInterface.TokenInfoStruct[];
  };

  export type LiquidationInfoStructOutput = [
    isLiquidateTarget: boolean,
    tokenInfo: WemixfiLendingViewInterface.TokenInfoStructOutput[]
  ] & {
    isLiquidateTarget: boolean;
    tokenInfo: WemixfiLendingViewInterface.TokenInfoStructOutput[];
  };
}

export interface WemixfiLendingViewInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "owner"
      | "supportsInterface"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "cTokenMetaDataList"
      | "cTokenMetaDataListAuth"
      | "calculateLiquidatorSeizeAmount"
      | "controller"
      | "getAccountInfo"
      | "getCTokenInfo"
      | "getLiquidationInfo"
      | "getOraclePrice"
      | "initialize"
      | "mainCTokenSymbol"
      | "mainSymbol"
      | "priceOracle"
      | "setController"
      | "setPriceOracle"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "ProxyImplementationUpdated"
      | "Initialized"
      | "NewController"
      | "NewPriceOracle"
  ): EventFragment;

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cTokenMetaDataList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cTokenMetaDataListAuth",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateLiquidatorSeizeAmount",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountInfo",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCTokenInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOraclePrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mainCTokenSymbol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mainSymbol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOracle",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cTokenMetaDataList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cTokenMetaDataListAuth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateLiquidatorSeizeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mainCTokenSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mainSymbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOracle",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProxyImplementationUpdatedEvent {
  export type InputTuple = [
    previousImplementation: AddressLike,
    newImplementation: AddressLike
  ];
  export type OutputTuple = [
    previousImplementation: string,
    newImplementation: string
  ];
  export interface OutputObject {
    previousImplementation: string;
    newImplementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewControllerEvent {
  export type InputTuple = [newController: AddressLike];
  export type OutputTuple = [newController: string];
  export interface OutputObject {
    newController: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPriceOracleEvent {
  export type InputTuple = [newPriceOracle: AddressLike];
  export type OutputTuple = [newPriceOracle: string];
  export interface OutputObject {
    newPriceOracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WemixfiLendingView extends BaseContract {
  connect(runner?: ContractRunner | null): WemixfiLendingView;
  waitForDeployment(): Promise<this>;

  interface: WemixfiLendingViewInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  owner: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<[id: BytesLike], [boolean], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  cTokenMetaDataList: TypedContractMethod<
    [],
    [WemixfiLendingViewInterface.CTokenMetaDataStructOutput[]],
    "view"
  >;

  cTokenMetaDataListAuth: TypedContractMethod<
    [account: AddressLike],
    [WemixfiLendingViewInterface.CTokenMetaDataStructOutput[]],
    "view"
  >;

  calculateLiquidatorSeizeAmount: TypedContractMethod<
    [
      cTokenBorrowed: AddressLike,
      cTokenCollateral: AddressLike,
      actualRepayAmount: BigNumberish
    ],
    [[bigint, bigint]],
    "view"
  >;

  controller: TypedContractMethod<[], [string], "view">;

  getAccountInfo: TypedContractMethod<
    [cToken: AddressLike, account: AddressLike],
    [WemixfiLendingViewInterface.AccountInfoStructOutput],
    "view"
  >;

  getCTokenInfo: TypedContractMethod<
    [cToken: AddressLike],
    [WemixfiLendingViewInterface.CTokenInfoStructOutput],
    "view"
  >;

  getLiquidationInfo: TypedContractMethod<
    [account: AddressLike],
    [WemixfiLendingViewInterface.LiquidationInfoStructOutput],
    "view"
  >;

  getOraclePrice: TypedContractMethod<[cToken: AddressLike], [bigint], "view">;

  initialize: TypedContractMethod<
    [controller_: AddressLike, priceOracle_: AddressLike],
    [void],
    "nonpayable"
  >;

  mainCTokenSymbol: TypedContractMethod<[], [string], "view">;

  mainSymbol: TypedContractMethod<[], [string], "view">;

  priceOracle: TypedContractMethod<[], [string], "view">;

  setController: TypedContractMethod<
    [newController_: AddressLike],
    [void],
    "nonpayable"
  >;

  setPriceOracle: TypedContractMethod<
    [priceOracle_: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[id: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "cTokenMetaDataList"
  ): TypedContractMethod<
    [],
    [WemixfiLendingViewInterface.CTokenMetaDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "cTokenMetaDataListAuth"
  ): TypedContractMethod<
    [account: AddressLike],
    [WemixfiLendingViewInterface.CTokenMetaDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateLiquidatorSeizeAmount"
  ): TypedContractMethod<
    [
      cTokenBorrowed: AddressLike,
      cTokenCollateral: AddressLike,
      actualRepayAmount: BigNumberish
    ],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "controller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAccountInfo"
  ): TypedContractMethod<
    [cToken: AddressLike, account: AddressLike],
    [WemixfiLendingViewInterface.AccountInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCTokenInfo"
  ): TypedContractMethod<
    [cToken: AddressLike],
    [WemixfiLendingViewInterface.CTokenInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLiquidationInfo"
  ): TypedContractMethod<
    [account: AddressLike],
    [WemixfiLendingViewInterface.LiquidationInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOraclePrice"
  ): TypedContractMethod<[cToken: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [controller_: AddressLike, priceOracle_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mainCTokenSymbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mainSymbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setController"
  ): TypedContractMethod<[newController_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPriceOracle"
  ): TypedContractMethod<[priceOracle_: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProxyImplementationUpdated"
  ): TypedContractEvent<
    ProxyImplementationUpdatedEvent.InputTuple,
    ProxyImplementationUpdatedEvent.OutputTuple,
    ProxyImplementationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NewController"
  ): TypedContractEvent<
    NewControllerEvent.InputTuple,
    NewControllerEvent.OutputTuple,
    NewControllerEvent.OutputObject
  >;
  getEvent(
    key: "NewPriceOracle"
  ): TypedContractEvent<
    NewPriceOracleEvent.InputTuple,
    NewPriceOracleEvent.OutputTuple,
    NewPriceOracleEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProxyImplementationUpdated(address,address)": TypedContractEvent<
      ProxyImplementationUpdatedEvent.InputTuple,
      ProxyImplementationUpdatedEvent.OutputTuple,
      ProxyImplementationUpdatedEvent.OutputObject
    >;
    ProxyImplementationUpdated: TypedContractEvent<
      ProxyImplementationUpdatedEvent.InputTuple,
      ProxyImplementationUpdatedEvent.OutputTuple,
      ProxyImplementationUpdatedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NewController(address)": TypedContractEvent<
      NewControllerEvent.InputTuple,
      NewControllerEvent.OutputTuple,
      NewControllerEvent.OutputObject
    >;
    NewController: TypedContractEvent<
      NewControllerEvent.InputTuple,
      NewControllerEvent.OutputTuple,
      NewControllerEvent.OutputObject
    >;

    "NewPriceOracle(address)": TypedContractEvent<
      NewPriceOracleEvent.InputTuple,
      NewPriceOracleEvent.OutputTuple,
      NewPriceOracleEvent.OutputObject
    >;
    NewPriceOracle: TypedContractEvent<
      NewPriceOracleEvent.InputTuple,
      NewPriceOracleEvent.OutputTuple,
      NewPriceOracleEvent.OutputObject
    >;
  };
}
